#!/usr/bin/env python

from __future__ import print_function
import os
import sys
import yaml
import boto.ec2
import traceback
import collections

# Allocate an EIP in each region, save the results in a YAML file
# for use for region setup.

def read_yaml_file(filename):
    if os.path.exists(filename):
        with open(filename, 'r') as f:
            return yaml.load(f) or {}
    return {}

vpcs = read_yaml_file('configuration/vpcs.yaml')['vpcs']
eips = read_yaml_file('configuration/eips.yaml')

# A region->allocation_id dictionary for newly allocated EIP's
# NOTE: This is different from the 'eips' dictionary, which also keeps the IP address
new_eips = collections.defaultdict(list)

# Set to true for the corner case when we only have to add region to existing EIP's
write_file = False

def allocate_eip(name, region):
  print('==> Allocating new EIP for %(name)s at region %(region)s' % locals())
  ec2 = boto.ec2.connect_to_region(region)
  eip = ec2.allocate_address(domain='vpc')
  eips[name] = {
    'allocation_id': str(eip.allocation_id),
    'public_ip': str(eip.public_ip),
    'region': region,
  }
  new_eips[region].append(str(eip.allocation_id))
  print('==> %s: allocated EIP: %s/%s in region %s' %
    (name, eips[name]['public_ip'], eips[name]['allocation_id'], region))


def release_eip(name, region, allocation_id):
  ec2 = boto.ec2.connect_to_region(region)
  if [x for x in ec2.get_all_addresses() if x.allocation_id == allocation_id]:
    print ('found %(allocation_id)s in region %(region)s on AWS. Releasing' % locals())
    ec2.release_address(allocation_id=allocation_id)
    del eips[name]
    write_file = True
  else:
    print ('allocation %(allocation_id)s not found on in region %(region)s.' %
      locals())


try:
  for name in vpcs:
    if 'region' not in vpcs[name]:
      # TODO: copy IP address from the VPC's configuration
      print('%s: no region specified, skipping' % name)
      continue

    region = vpcs[name]['region']

    if name in eips:
      print('%s: already has an EIP: %s/%s' % (name, eips[name]['public_ip'], eips[name]['allocation_id']))
      if 'region' in eips[name]:
        if eips[name]['region'] != region:
          print('%s: REGION MISMATCH! "%s" != "%s". UPDATING' %
            (name, eips[name]['region'], region))
          release_eip(name, eips[name]['region'], eips[name]['allocation_id'])
          allocate_eip(name, region)
      else:
        print('%s: adding region to EIP record: "%s"' %(name, region))
        eips[name]['region'] = region
        write_file = True
    else:
      allocate_eip(name, region)


  for name in eips.keys():
    eip = eips[name]
    if not 'region' in eip:
      print ('%s: no region, skipping' % name)
    elif not 'allocation_id' in eip:
      print ('%s: ERROR - no allocation_id' % name)
    elif not name in vpcs:
      allocation_id = eip['allocation_id']
      region = eip['region']
      print ('%(name)s: not defined in VPCS, RELEASING allocation_id '
        '"%(allocation_id)s" in region "%(region)s"' % locals())
      release_eip(name, eip['region'], eip['allocation_id'])
    elif not 'region' in vpcs[name]:
      print ('%(name)s: ERROR - no region in VPC' % locals())
    elif eip['region'] != vpcs[name]['region']:
      print ('%s: ERROR - region "%s" in eip does not match region "%s" in VPC!' %
        (name, eip['region'], vpcs[name]['region']))
    else:
      print ('%(name)s: all good' % locals())

except:
  e = sys.exc_info()[0]
  print('Caught error: %s, got %d new EIP\'s to release back' % (e, len(new_eips)), file=sys.stderr)
  traceback.print_exc()
  if new_eips:
    print('Releasting new EIPS')
    for region, allocation_ids in iter(sorter(new_eips.iteritems())):
      ec2 = boto.ec2.connect_to_region(region)
      for allocation_id in allocation_ids:
        print("Releasing allocation_id \"%(allocation_id)s\" in "
          "region \"%(region)s\"" % locals())
        ec2.release_address(allocation_id=allocation_id)
  else:
    print('No new EIP\'s to release after failure')

  sys.exit(1)

if write_file or new_eips:
  print('==> New EIPS allocated or new regions fields set. Writing configuration/eips.yaml')
  with open('configuration/eips.yaml', 'w') as f:
    f.write('# AUTO GENERATED BY bin/manage-eips, EDITS WILL BE LOST\n')
    yaml.dump(eips, f, default_flow_style=False)
else:
  print("No change to EIP's. Skipping write")

sys.exit(0)
